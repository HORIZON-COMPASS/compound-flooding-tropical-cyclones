import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

class SfincsRun:
    def __init__(self, model_path, model_name):
        """
        Initialize the SfincsRun object with the model path and name.
        """
        self.model_path = model_path
        self.model_name = model_name
        self.results = {}  # Dictionary to store model results (e.g., hmax_masked, hmax_diff)
        self.cell_area = None  # Placeholder for cell area, could be defined elsewhere
        self.volume_diff_from_F = None  # Placeholder for Volume_diff_from_F

    def load_model(self):
        """
        Load the model based on the model path. This is just an example method.
        """
        # Assuming you're using a class like SfincsModel or similar to load the model
        # self.sfincs_model = SfincsModel(self.model_path, mode="r") 
        # Placeholder:
        print(f"Loading model from {self.model_path}...")
    
    def calculate_flood_extent(self):
        """
        Compute the flood extent (flooded area) from the model's hmax_masked variable.
        Assumes self.results["hmax_masked"] is already set.
        """
        flooded_cells = self.results["hmax_masked"] > 0  # Create a boolean mask for flooded cells
        flood_extent = (flooded_cells * self.cell_area).sum().compute()  # Compute flooded area
        
        # Convert to square kilometers
        flood_extent_km2 = flood_extent / 1e6
        return flood_extent_km2

    def calculate_hmax_diff(self, factual_hmax):
        """
        Compute the difference in hmax between the current model and the factual model.
        Assumes the factual hmax is passed as a parameter.
        """
        if "hmax_masked" in self.results:
            hmax_diff = factual_hmax - self.results["hmax_masked"]
            self.results["hmax_diff"] = hmax_diff
            return hmax_diff
        else:
            print("hmax_masked not found in model results!")
            return None

    def calculate_volume_diff_from_F(self, factual_volume):
        """
        Calculate the volume difference from the factual model as a percentage.
        """
        if "flood_volume" in self.results:
            volume_diff = (self.results["flood_volume"] - factual_volume) / factual_volume * 100
            self.volume_diff_from_F = volume_diff
            self.results["volume_diff_from_F"] = volume_diff
            return volume_diff
        else:
            print("Flood volume not found in model results!")
            return None

    def store_result(self, key, value):
        """
        Store a new result in the model's results dictionary.
        """
        self.results[key] = value

    def print_summary(self):
        """
        Print a summary of the model results.
        """
        print(f"Model Name: {self.model_name}")
        print(f"Flood Extent (kmÂ²): {self.results.get('flood_extent_km2', 'N/A')}")
        print(f"hmax_diff: {self.results.get('hmax_diff', 'N/A')}")
        print(f"Volume_diff_from_F: {self.results.get('volume_diff_from_F', 'N/A')}")

    def plot_volume_diff(self, models):
        """
        Plot a swarm plot of Volume_diff_from_F (%) for each model using seaborn.
        """
        # Create a DataFrame to hold model results for plotting
        model_names = [model.model_name for model in models]
        volume_diffs = [model.volume_diff_from_F for model in models]

        df = pd.DataFrame({
            "Model": model_names,
            "Volume_diff_from_F(%)": volume_diffs
        })

        # Create a seaborn catplot (swarm plot)
        sns.set(style="whitegrid")
        plot = sns.catplot(data=df, x="Model", y="Volume_diff_from_F(%)", kind="swarm", height=6, aspect=2)
        plot.set_axis_labels("Model", "Volume Difference from F (%)")
        plot.fig.suptitle("Volume Difference from F (%) per Model", fontsize=16)
        plt.xticks(rotation=90)
        plt.show()


# Example usage of the class
if __name__ == "__main__":
    # Initialize the models
    model_1 = SfincsRun(model_path="path/to/model_1", model_name="Model_1")
    model_2 = SfincsRun(model_path="path/to/model_2", model_name="Model_2")
    
    # Load models (replace with your actual
